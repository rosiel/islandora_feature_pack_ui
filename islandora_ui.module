<?php

/**
 * @file
 * Islandora UI Feature Pack module. Includes all hook implementations.
 */

/**
 * Implements hook_menu().
 */
function islandora_ui_menu() {
  $items = array();

  $items['islandora_ui/autocomplete/%'] = array(
    'page callback' => 'islandora_ui_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access ckeditor link'), // FIXME
    'type' => MENU_CALLBACK,
  );
  $items['admin/islandora/tools/ui'] = array(
    'title' => 'User Interface Features',
    'description' => 'Configure extra UI Features',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_ui_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/tools/ui/config/%'] = array(
    'title callback' => 'islandora_ui_get_config_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_ui_admin_config_form',5),
    'file' => 'includes/config.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/tools/ui/config/delete/%'] = array(
    'title' => 'Delete display configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ui_delete_config_form', 6),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/delete.inc',
  );

  // Scan all associations to build object links.
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  module_load_include('inc', 'islandora', 'includes/utilities');
  $associations = xml_form_builder_get_associations();
  $dsids_to_include = array();
  foreach ($associations as $association) {
    if (!isset($dsids_to_include[$association['dsid']])) {
      $dsids_to_include[$association['dsid']] = array($association['content_model']);
    }
    else {
      $dsids_to_include[$association['dsid']][] = $association['content_model'];
    }
  }

  foreach($dsids_to_include as $dsid => $cmodels) {
    $items['islandora/object/%islandora_object/edit_' . $dsid] = array(
      'title' => 'Edit ' . $dsid,
      'page callback' => 'islandora_ui_edit_datastream',
      'page arguments' => array(2, $dsid),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'islandora_ui_edit_datastream_access',
      'access arguments' => array(2, $dsid, $cmodels),
    );
    $items['islandora/object/%islandora_object/add_' . $dsid] = array(
      'title' => 'Add ' . $dsid,
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'islandora_ui_add_datastream_access',
      'access arguments' => array(2, $dsid, $cmodels),
      'file' => 'includes/datastream.form.inc',
      'file path' => drupal_get_path('module', 'xml_form_builder'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('xml_form_builder_datastream_form', 2, $dsid),
    );
  }
  return $items;
}

/**
 * Callback to edit the datastream.
 */
function islandora_ui_edit_datastream($object, $dsid) {
  if (isset($object[$dsid])) {
    module_load_include('inc', 'islandora', 'includes/datastream');
    return islandora_edit_datastream($object[$dsid]);
  }
  else {
    // No edit implementations.
    drupal_set_message(t('This datastream does not exist.'));
    drupal_goto("islandora/object/{$object->id}/manage/datastreams");
    break;
  }
}

/**
 * Access callback for editing datastreams also checks if datastream is present.
 */
function islandora_ui_edit_datastream_access($object, $dsid, $cmodels) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  if (!isset($object[$dsid])) {
    return FALSE;
  }
  elseif (!empty(array_intersect($object->models, $cmodels))) {
    return islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object[$dsid]);
  }
}


/*
 * Access callback for adding a new datastream.
 */
function islandora_ui_add_datastream_access($object, $dsid, $cmodels) {
  if (isset($object[$dsid])) {
    return FALSE;
  }
  else {
    if (!empty(array_intersect($object->models, $cmodels))) {
      return islandora_object_access_callback(ISLANDORA_ADD_DS, $object);
    }
  }

}

/**
 * Implements hook_ckeditor_plugin().
 */

function islandora_ui_ckeditor_plugin() {
  return array('islandora_path' => array(
    'name' => 'islandora_path',
    'desc' => t('Islandora Link - A plugin to easily create links to Islandora content.'),
    'path' => drupal_get_path('module', 'islandora_ui') .'/plugins/link/',
  ));
}

/**
 * Implementation of hook_element_info_alter().
 */
function islandora_ui_element_info_alter(&$type) {
  if (user_access('access ckeditor link')) {
    $type['text_format']['#pre_render'][] = 'islandora_ui_text_format_pre_render';
    $type['form']['#post_render'][] = 'islandora_ui_form_post_render';
  }
}

/*
 * Initializes the silly thing.
 */
function islandora_ui_text_format_pre_render($element) {
  _islandora_ui_has_text_format(TRUE);
  return $element;
}

/*
 * [This is just a do-it-once.]
 */
function _islandora_ui_has_text_format($set = FALSE) {
  static $islandora_ui_autocomplete_has = FALSE;
  if (!$set) {
    return $islandora_ui_autocomplete_has;
  }
  $islandora_ui_autocomplete_has = TRUE;
}

function islandora_ui_form_post_render($content, $element) {
  static $islandora_ui_added;
  if (!isset($islandora_ui_added) && _islandora_ui_has_text_format() && ($js = drupal_add_js()) && isset($js['settings']['data'])) {
    module_load_include('inc', 'islandora_ui', 'includes/db');
    $configurations = islandora_ui_get_configurations();
    foreach ($configurations as $key => $config) {
      $configurations[$key] = array($config['name'], $config['machine_name']);
    }
    $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
    if (isset($settings['ckeditor']) || isset($settings['wysiwyg']['configs']['ckeditor'])) {
      $islandora_ui_added = TRUE;
      drupal_add_css(drupal_get_path('module', 'islandora_ui') .'/islandora_ui_autocomplete.css');
      drupal_add_js('misc/autocomplete.js');
      drupal_add_js(array('islandora_link' => array(
        'module_path' => base_path() . drupal_get_path('module', 'islandora_ui'),
        'autocomplete_path' => url('islandora_ui/autocomplete/'),
        //'revert_path' => url('ckeditor_link/revert'), // FIXME - implement revert.
        'msg_invalid_path' => t('Not a valid Islandora path.'),
        'type_name' => t('Islandora link'),
        'autocomplete_options' => $configurations,
        'type_selected' => 1, //(bool) variable_get('ckeditor_link_type_selected', 1),
      )), 'setting');
    }
  }
  return $content;
}

/*
 *
 */
function islandora_ui_autocomplete($config_name = NULL) {
  module_load_include('inc', 'islandora_ui', 'includes/db');

  // Deal with no config name.

  $matches = array();
  $limit = variable_get('islandora_ui_limit', 10); //FIXME make the admin screen to configure this.
  $configuration = islandora_ui_retrieve_configuration($config_name);

  if (!$configuration) {
    return;
  }

  // set the query and the stub.
  $query = $configuration['search_field'] . ':*';
  $path = request_path();
  if ($path) {
    $path_array = explode('/', $path);
    $stub = end($path_array);
    $parts = explode(' ', $stub);
    $stub = array_pop($parts);
    $query = "";
    if (!empty($parts)) {
      foreach ($parts as $part) {
        $query .= $configuration['search_field'] . ':' . $part . ' AND ';
      }
    }
    $query .= "(" . $configuration['search_field'] . ':' . $stub . '*' . " OR " . $configuration['search_field'] . ':' . $stub . ")";
  }
  // Set the return values.
  $params = array(
    'fl' => array($configuration['search_field'], 'PID'),
  );

  // Set the "filters" - at the moment they are in the query (q) and should be moved to filter query (fq).
  // when using fq, we can take the () out of the query.
  $filters = array();
  foreach($configuration['filters'] as $filter ) {
    $filters[] = $filter['predicate'] . ':"' . $filter['value'] . '"';
  }
  $filters = implode(' AND ', $filters);
  if($filters) {
    $query .= ' AND ' . $filters;
  }

  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  try {
    $results = $solr->search($query, 0, 1000, $params);
    $json = json_decode($results->getRawResponse(), TRUE);
  }
  catch (Exception $e) {
    watchdog_exception('Islandora Entities', $e, 'Got an exception while searching entities for callback.', array(), WATCHDOG_ERROR);
  }

  $list = array();
  foreach ($json['response']['docs'] as $choice) {
    if (isset($choice[$configuration['search_field']])) {
      $title = $choice[$configuration['search_field']][0];
      $pid = $choice['PID'];
      $list["$title ($pid)"] = '<div class="reference-autocomplete">' . check_plain($title) . '</div>';
    }
  }

  drupal_alter('islandora_ui_autocomplete', $results, $string);
  array_splice($list, $limit);
  drupal_json_output($list);

}

/*
 * Title callback for the config form.
 */
function islandora_ui_get_config_title($machine_name){
  module_load_include('inc', 'islandora_ui', 'includes/db');
  $config = islandora_ui_retrieve_configuration($machine_name);
  if ($config) {
    return 'Edit configuration ' . $config['label'];
  }
  return 'Editing configuration.';
}